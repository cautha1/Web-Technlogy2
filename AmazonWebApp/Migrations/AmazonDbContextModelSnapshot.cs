// <auto-generated />
using System;
using AOWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AOWebApp.Migrations
{
    [DbContext(typeof(AmazonDbContext))]
    partial class AmazonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AOWebApp.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("addressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("addressLine");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postcode");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("suburb");

                    b.HasKey("AddressId")
                        .HasName("pk_addressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AOWebApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("addressID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lastName");

                    b.Property<string>("MainPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("mainPhoneNumber");

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("secondaryPhoneNumber");

                    b.HasKey("CustomerId")
                        .HasName("pk_customers");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AOWebApp.Models.CustomerOrder", b =>
                {
                    b.Property<int>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderNumber");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderNumber"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerID");

                    b.Property<DateOnly?>("DatePaid")
                        .HasColumnType("date")
                        .HasColumnName("datePaid");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.HasKey("OrderNumber")
                        .HasName("pk_orderNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("AOWebApp.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<decimal>("ItemCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("itemCost");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("itemDescription");

                    b.Property<string>("ItemImage")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("itemImage");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("itemName");

                    b.HasKey("ItemId")
                        .HasName("pk_itemID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("categoryName");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parentCategoryID");

                    b.HasKey("CategoryId")
                        .HasName("pk_itemCategories");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemMarkupHistory", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<decimal>("Markup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 1)")
                        .HasDefaultValue(1.3m)
                        .HasColumnName("markup");

                    b.Property<bool>("Sale")
                        .HasColumnType("bit")
                        .HasColumnName("sale");

                    b.HasKey("ItemId", "StartDate");

                    b.ToTable("ItemMarkupHistory", (string)null);
                });

            modelBuilder.Entity("AOWebApp.Models.ItemsInOrder", b =>
                {
                    b.Property<int>("OrderNumber")
                        .HasColumnType("int")
                        .HasColumnName("orderNumber");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("NumberOf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("numberOf");

                    b.Property<decimal?>("TotalItemCost")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("totalItemCost");

                    b.HasKey("OrderNumber", "ItemId")
                        .HasName("pk_itemsInOrder");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemsInOrder", (string)null);
                });

            modelBuilder.Entity("AOWebApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateOnly>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("reviewDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReviewDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("reviewDescription");

                    b.HasKey("ReviewId")
                        .HasName("pk_reviews");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AOWebApp.Models.Customer", b =>
                {
                    b.HasOne("AOWebApp.Models.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("fk_address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AOWebApp.Models.CustomerOrder", b =>
                {
                    b.HasOne("AOWebApp.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_customerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AOWebApp.Models.Item", b =>
                {
                    b.HasOne("AOWebApp.Models.ItemCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_itemCategory");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemCategory", b =>
                {
                    b.HasOne("AOWebApp.Models.ItemCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_parentCategory");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemMarkupHistory", b =>
                {
                    b.HasOne("AOWebApp.Models.Item", "Item")
                        .WithMany("ItemMarkupHistories")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ItemMarkupHistory_Items");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemsInOrder", b =>
                {
                    b.HasOne("AOWebApp.Models.Item", "Item")
                        .WithMany("ItemsInOrders")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_items");

                    b.HasOne("AOWebApp.Models.CustomerOrder", "OrderNumberNavigation")
                        .WithMany("ItemsInOrders")
                        .HasForeignKey("OrderNumber")
                        .IsRequired()
                        .HasConstraintName("fk_orderNumber");

                    b.Navigation("Item");

                    b.Navigation("OrderNumberNavigation");
                });

            modelBuilder.Entity("AOWebApp.Models.Review", b =>
                {
                    b.HasOne("AOWebApp.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_customer_review");

                    b.HasOne("AOWebApp.Models.Item", "Item")
                        .WithMany("Reviews")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("fk_item_review");

                    b.Navigation("Customer");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AOWebApp.Models.Address", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("AOWebApp.Models.Customer", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AOWebApp.Models.CustomerOrder", b =>
                {
                    b.Navigation("ItemsInOrders");
                });

            modelBuilder.Entity("AOWebApp.Models.Item", b =>
                {
                    b.Navigation("ItemMarkupHistories");

                    b.Navigation("ItemsInOrders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("AOWebApp.Models.ItemCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
